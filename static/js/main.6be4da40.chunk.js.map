{"version":3,"sources":["service/api.ts","utils/breeds.ts","utils/file-reader.ts","utils/names.ts","components/Previewimage.tsx","utils/capitalize.ts","components/Title.tsx","components/Fileupload.tsx","components/Info.tsx","components/Scrollable.tsx","components/Spinner.tsx","components/Layout.tsx","index.tsx"],"names":["api","axios","create","baseURL","timeout","wrapperOnBreedsName","breedName","a","get","response","message","data","breedResponse","breeds","fetchDogByBreedName","allBreeds","names","name","has","then","f","getFile","file","Promise","resolve","reject","undefined","Error","fileReader","FileReader","readAsDataURL","addEventListener","imageObject","imageSource","result","replace","formatNames","array","temporary","forEach","test","push","split","unique","Set","flat","Array","from","forwardReference","reference","src","alt","className","ref","capitalize","string","char","toUpperCase","PreviewTitle","temporaryTitle","title","map","word","nameOfThetitle","length","join","FileUpload","classifiedDogNames","onUploadStarted","onUploadCompleted","imageReference","useReference","fileInput","useState","image","setImage","onFileHandler","event","files","target","imageInfo","current","mobilenet","model","classify","predictions","filteredNames","item","toLowerCase","filter","console","warn","type","accept","onChange","onClick","preventDefault","click","Info","msg","Scrollable","properties","MAX_LIMIT","containerReference","createReference","currentCount","loadMoreImages","offset","size","idx","props","setState","state","loading","onScrollHandler","scrollTop","clientHeight","scrollHeight","finished","setTimeout","Math","random","this","removeEventListener","Fragment","breedUrl","key","uniqid","PureComponent","Spinner","xmlns","viewBox","width","height","fill","d","Map","LayoutContainer","nameOfTheBreeds","setNameOfTheBreeds","classifiedDogsList","setClassifiedDogsList","setLoading","isEmpty","setIsEmpty","useEffect","Object","keys","set","catch","error","onUploadedHandler","dogNames","allResults","next","done","value","all","breedList","dog","breedsResult","ReactDOM","render","document","querySelector"],"mappings":"2YAEaA,E,OAAMC,EAAMC,OAAO,CAC9BC,QAAS,sBACTC,QAAS,ICELC,EAAmB,uCAAG,WAC1BC,GAD0B,mBAAAC,EAAA,sEAGHP,EAAIQ,IAAJ,iBAAkBF,EAAlB,YAHG,cAGpBG,EAHoB,OAKhBC,EACND,EADFE,KAAQD,QAEJE,EAAgC,CACpCC,OAAQH,GARgB,kBAWnBE,GAXmB,2CAAH,sDAcZE,EAAmB,UAAG,SAAUA,EAC3CC,EACAC,GAFiC,yFAIdA,GAJc,4DAItBC,EAJsB,SAK3BF,EAAUG,IAAID,GALa,gBAM7B,OAN6B,SAMvBZ,EAAoBY,GAAME,MAC9B,SAACV,GAAD,OAA8CA,KAPnB,qHAAAW,IAAA,kDAAUN,EAAV,wB,QCftBO,EAAO,uCAAG,WAAOC,GAAP,SAAAf,EAAA,+EACd,IAAIgB,SAAQ,SAACC,EAAmBC,GACrC,QAAaC,IAATJ,EACFG,EAAO,IAAIE,MAAM,+BACZ,CACL,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,cAAcR,GACzBM,EAAWG,iBAAiB,QAAQ,WAClC,IAAMC,EAA0B,CAC9BC,YAAaL,EAAWM,OACxBjB,KAAMK,EAAKL,KAAKkB,QAAQ,2JAAa,KAEvCX,EAAQQ,MAEVJ,EAAWG,iBAAiB,SAAS,WACnCN,EAAO,IAAIE,MAAM,8CAfF,2CAAH,sDCLPS,EAAc,SAACC,GAC1B,IAAMC,EAAwB,GAE9BD,EAAME,SAAQ,SAACtB,GACT,sEAAMuB,KAAKvB,GACbqB,EAAUG,KAAKxB,EAAKyB,MAAM,MAE1BJ,EAAUG,KAAK,CAACxB,OAGpB,IAAM0B,EAAS,IAAIC,IAAIN,EAAUO,QAEjC,OAAOC,MAAMC,KAAKD,MAAMC,KAAKJ,KCShBK,wBAdM,SAAC,EAEpBC,GAFmB,IACjBC,EADiB,EACjBA,IAAKC,EADY,EACZA,IADY,OAInB,4BAAQC,UAAU,uBAChB,yBACEF,IAAKA,EACLC,IAAKA,EACLE,IAAKJ,EACLG,UAAU,yFCbDE,EAHI,SAACC,GAAD,OACjBA,EAAOpB,QAAQ,kBAAS,SAACqB,GAAD,OAA0BA,EAAKC,kBC2B1CC,EArBM,SAAC,GAAsD,IACpEC,EADmE,EAAnDC,MACOC,KAAI,SAACC,GAAD,OAA0BR,EAAWQ,MAChEC,EACJJ,EAAeK,OAAS,EACpBL,EAAeM,KAAK,KACpBN,EAAeM,KAAK,KAE1B,OACE,yBAAKb,UAAU,gCACc,IAA1BW,EAAeC,OACd,wBAAIZ,UAAU,kCAAd,gBAEA,wBAAIA,UAAU,oBAAd,wEACwE,IACtE,0BAAMA,UAAU,aAAaW,MC8FxBG,EAhGI,SAAC,GAIwB,IAH1CC,EAGyC,EAHzCA,mBACAC,EAEyC,EAFzCA,gBACAC,EACyC,EADzCA,kBAEMC,EAAiBC,iBAA+B,MAChDC,EAAYD,iBAA+B,MAFR,EAGfE,mBAAiC,MAHlB,mBAGlCC,EAHkC,KAG3BC,EAH2B,KAKnCC,EAAa,uCAAG,WACpBC,GADoB,6BAAAtE,EAAA,6DAIRuE,EACRD,EADFE,OAAUD,MAGNxD,EAAOwD,OAEWpD,IAApB0C,QAA6C1C,IAAZJ,EAAK,IACxC8C,IAVkB,kBAaO/C,EAAQC,EAAK,IAbpB,UAaZ0D,EAbY,OAclBL,EAASK,GAEsB,OAA3BV,EAAeW,QAhBD,kCAiBIC,MAjBJ,eAiBVC,EAjBU,iBAkBWA,EAAMC,SAC/Bd,EAAeW,SAnBD,QAkBVI,EAlBU,qBAuBQA,EAvBR,GAuBPjC,EAvBO,KAuBPA,UAEHkC,EAAgBlD,EACpBgB,EACGV,MAAM,yEACNmB,KAAI,SAAC0B,GAAD,OACHA,EAAKC,cAAcrD,QAAQ,sEAAO,OAEnCsD,QAAO,SAACF,GAAD,OAA0BA,MAGtClB,EAAkBiB,GAlCF,0DAyClBI,QAAQC,KAAR,MAzCkB,kCA4Cb,GA5Ca,0DAAH,sDAsDnB,OACE,kBAAC,WAAD,KACE,2BACEC,KAAK,OACLC,OAAO,UACPC,SAAUlB,EACVxB,UAAU,SACVC,IAAKmB,IAEP,6BACa,OAAVE,EAAiB,KAChB,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAcd,MAAOO,IACrB,kBAAC,EAAD,CACEjB,IAAKwB,EAAMzC,YACXkB,IAAKuB,EAAMzD,KACXoC,IAAKiB,MAKb,yBAAKlB,UAAU,uBACb,4BACEA,UAAU,mFACV2C,QA/BgB,SACtBlB,GACO,IAAD,EACNA,EAAMmB,iBACN,UAAAxB,EAAUS,eAAV,SAAmBgB,UA6BF,OAAVvB,EAAA,sBClGIwB,EALF,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OACX,yBAAK/C,UAAU,kEACb,0BAAMA,UAAU,qBAAqB+C,K,iECuI1BC,E,kDAlHb,WAAmBC,GAA8B,IAAD,8BAC9C,cAAMA,IATSC,UAAoB,GAQW,EAN/BC,mBAEbC,sBAI4C,EAFxCC,aAAuB,EAEiB,EAuE/BC,eAAiB,SAACC,EAAgBC,GAGjD,IAFA,IAAMtE,EAAsB,GAEnBuE,EAAMF,EAAQE,EAAMF,EAASC,EAAMC,SACXnF,IAA3B,EAAKoF,MAAMjG,OAAOgG,IACpBvE,EAAUG,KAAK,EAAKqE,MAAMjG,OAAOgG,IAGrC,EAAKE,SAAS,CACZlG,OAAO,GAAD,mBAAM,EAAKmG,MAAMnG,QAAWyB,GAClC2E,SAAS,KAjFmC,EAqF/BC,gBAAkB,WAEK,OAApC,EAAKX,mBAAmBtB,SACxB,EAAKsB,mBAAmBtB,QAAQkC,UAC9B,EAAKZ,mBAAmBtB,QAAQmC,cAChC,EAAKb,mBAAmBtB,QAAQoC,eAEP,IAAvB,EAAKL,MAAMC,UAA6C,IAAxB,EAAKD,MAAMM,WACzC,EAAKN,MAAMnG,OAAOmD,QAAU,EAAK8C,MAAMjG,OAAOmD,OAChD,EAAK+C,SAAS,CACZO,UAAU,EACVL,SAAS,KAGX,EAAKR,cAAgB,GAErB,EAAKM,SAAS,CAAEE,SAAS,IAAQ,kBAC/BM,YACE,kBACE,EAAKb,eAAe,EAAKD,aAAc,EAAKH,aAC9B,IAAhBkB,KAAKC,gBAvGf,EAAKT,MAAQ,CACXnG,OAAQ,GACRyG,UAAU,EACVL,SAAS,GALmC,E,gEAUN,OAApCS,KAAKnB,mBAAmBtB,UAC1ByC,KAAKnB,mBAAmBtB,QAAQlD,iBAC9B,SACA2F,KAAKR,iBAEPQ,KAAKX,SAAS,CAAEE,SAAS,IACzBS,KAAKhB,eAAe,EAAGgB,KAAKpB,c,6CAKU,OAApCoB,KAAKnB,mBAAmBtB,SAC1ByC,KAAKnB,mBAAmBtB,QAAQ0C,oBAC9B,SACAD,KAAKR,iBAITQ,KAAKjB,aAAe,I,+BAGY,IAAD,EACOiB,KAAKV,MAAnCnG,EADuB,EACvBA,OAAQyG,EADe,EACfA,SAAUL,EADK,EACLA,QAE1B,OACE,kBAAC,IAAMW,SAAP,KACE,yBAAKxE,UAAU,mDACb,yBAAKA,UAAU,kBAAkBC,IAAKqE,KAAKnB,oBACzC,yBAAKnD,UAAU,yCACZvC,EAAOgD,KACN,SAACgE,GAAD,OACE,kBAAC,IAAMD,SAAP,CAAgBE,IAAKC,OACnB,yBAAK3E,UAAU,iCACb,yBACEF,IAAK2E,EACL1E,IAAI,SACJC,UAAU,sCAQxB,yBAAKA,UAAU,mDACA,IAAZ6D,EACC,0BAAM7D,UAAU,gCAAhB,cACE,MAEU,IAAbkE,EACC,wBAAIlE,UAAU,yCAAd,4EAIE,Y,GAzES4E,iBCAVC,G,MAfC,kBACd,yBAAK7E,UAAU,WACb,yBACE8E,MAAM,6BACNC,QAAQ,gBACRC,MAAM,MACNC,OAAO,OAEP,0BACEC,KAAK,UACLC,EAAE,o0BCFJxH,EAAY,IAAIyH,IAoHPC,EAlHS,WAA2B,IAAD,EACFhE,mBAAmB,IADjB,mBACzCiE,EADyC,KACxBC,EADwB,OAEIlE,mBAAmB,IAFvB,mBAEzCmE,EAFyC,KAErBC,EAFqB,OAGlBpE,mBAAyB,MAHP,mBAGzCwC,EAHyC,KAGhC6B,EAHgC,OAIlBrE,oBAAkB,GAJA,mBAIzCsE,EAJyC,KAIhCC,EAJgC,KAMhDC,qBAAU,WACRjJ,EACGQ,IAAI,oBACJW,MAAK,SAACV,GACLyI,OAAOC,KAAK1I,EAASE,KAAKD,SAAS6B,SAAQ,SACzCuF,GAEA/G,EAAUqI,IAAItB,EAAKrH,EAASE,KAAKD,QAAQoH,UAG5CuB,OAAM,SAACC,GACN5D,QAAQC,KAAK2D,QAEhB,IAEH,IAIMC,EAAiB,uCAAG,WACxBvI,GADwB,uCAAAT,EAAA,sDAGpBwI,GACFC,GAAW,GAGbL,EAAmB3H,GACnB8H,GAAW,GACLU,EAAqB,GATH,cAWLxI,GAXK,IAWxB,2BAAWC,EAAe,QACpBF,EAAUG,IAAID,IAChBuI,EAAS/G,KAAKxB,GAbM,8BAiBxB0H,EAAmBa,GAEb7I,EAAOG,EAAoBC,EAAWC,GACtCyI,EAAa,GApBK,WAyBJ,KAFZC,EAAO/I,EAAK+I,QAETC,KAzBa,qDA6BtBF,EAAWhH,KAAKiH,EAAKE,OA7BC,wCAiCArI,QAAQsI,IAAIJ,GAjCZ,QAiClBK,EAjCkB,OAkClBjJ,EAAS,GAlCS,cAoCNiJ,GApCM,IAoCxB,2BAAWC,EAAkB,QAC3BlJ,EAAO4B,KAAKsH,EAAIlJ,QArCM,qCAyClBmJ,EAAenJ,EAAOgC,OAC5BgG,EAAsBmB,GACtBlB,GAAW,GAEiB,IAAxBkB,EAAahG,QACfgF,GAAW,GA9CW,mBAiDjB,GAjDiB,4CAAH,sDAoDvB,OACE,kBAAC,IAAMpB,SAAP,KACE,wBAAIxE,UAAU,6CAAd,gBAIA,yBAAKA,UAAU,oCACb,yBAAKA,UAAU,gFACb,kBAAC,EAAD,CACEgB,gBAjEqB,WAC7ByE,EAAsB,KAiEdxE,kBAAmBkF,EACnBpF,mBAAoBuE,KAGxB,yBAAKtF,UAAU,oDACO,kBAAZ6D,EACN,kBAAC,EAAD,CACEd,IAAI,uEAGQ,IAAZc,EACF,yBAAK7D,UAAU,6CACb,kBAAC,EAAD,OAEAwF,EAAmB5E,OAAS,EAC9B,yBAAKZ,UAAU,YACb,kBAAC,EAAD,CAAYvC,OAAQ+H,MAER,IAAZG,EACF,kBAAC,EAAD,CAAM5C,IAAI,sBACR,SClHd8D,IAASC,OAAO,kBAAC,EAAD,MAAqBC,SAASC,cAAc,Y","file":"static/js/main.6be4da40.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const api = axios.create({\n  baseURL: 'https://dog.ceo/api',\n  timeout: 0,\n});\n","import { api } from '../service/api';\n\nexport interface BreedsResponse {\n  breeds: string[];\n}\n\nconst wrapperOnBreedsName = async (\n  breedName: string,\n): Promise<BreedsResponse> => {\n  const response = await api.get(`/breed/${breedName}/images`);\n  const {\n    data: { message },\n  } = response;\n  const breedResponse: BreedsResponse = {\n    breeds: message,\n  };\n\n  return breedResponse;\n};\n\nexport const fetchDogByBreedName = function* fetchDogByBreedName(\n  allBreeds: Map<string, string[]>,\n  names: string[],\n): IterableIterator<Promise<BreedsResponse>> {\n  for (const name of names) {\n    if (allBreeds.has(name)) {\n      yield wrapperOnBreedsName(name).then(\n        (response: BreedsResponse): BreedsResponse => response,\n      );\n    }\n  }\n};\n","export interface ImageProps {\n  imageSource: string;\n  name: string;\n}\n\nexport const getFile = async (file: File): Promise<ImageProps | Error> => {\n  return new Promise((resolve: Function, reject: Function): void => {\n    if (file === undefined) {\n      reject(new Error('File upload cancelled.'));\n    } else {\n      const fileReader = new FileReader();\n      fileReader.readAsDataURL(file);\n      fileReader.addEventListener('load', function onload(): void {\n        const imageObject: ImageProps = {\n          imageSource: fileReader.result as string,\n          name: file.name.replace(/\\W[a-z]+/u, ''),\n        };\n        resolve(imageObject);\n      });\n      fileReader.addEventListener('error', function onError(): void {\n        reject(new Error('Error caught: when reading a file'));\n      });\n    }\n  });\n};\n","export const formatNames = (array: string[]): string[] => {\n  const temporary: string[][] = [];\n\n  array.forEach((name: string): void => {\n    if (/\\s/u.test(name)) {\n      temporary.push(name.split(' '));\n    } else {\n      temporary.push([name]);\n    }\n  });\n  const unique = new Set(temporary.flat());\n\n  return Array.from(Array.from(unique));\n};\n","import React, { forwardRef as forwardReference, Ref as Reference } from 'react';\n\ninterface PreviewImageProps {\n  alt: string;\n  src: string;\n}\n\nconst PreviewImage = (\n  { src, alt }: PreviewImageProps,\n  reference: Reference<HTMLImageElement>,\n): React.ReactElement => (\n  <figure className=\"flex justify-center\">\n    <img\n      src={src}\n      alt={alt}\n      ref={reference}\n      className=\"object-center sm:object-top md:object-right lg:object-bottom xl:object-left h-40\"\n    />\n  </figure>\n);\n\nexport default forwardReference(PreviewImage);\n","const capitalize = (string: string): string =>\n  string.replace(/\\b\\w/u, (char: string): string => char.toUpperCase());\n\nexport default capitalize;\n","import React from 'react';\n\nimport capitalize from '../utils/capitalize';\ninterface PreviewTitleProps {\n  title: string[];\n}\n\nconst PreviewTitle = ({ title }: PreviewTitleProps): React.ReactElement => {\n  const temporaryTitle = title.map((word: string): string => capitalize(word));\n  const nameOfThetitle =\n    temporaryTitle.length > 1\n      ? temporaryTitle.join('/')\n      : temporaryTitle.join(' ');\n\n  return (\n    <div className=\"flex flex-col justify-center\">\n      {nameOfThetitle.length === 0 ? (\n        <h1 className=\"text-center text-2xl font-bold\">Analyzing...</h1>\n      ) : (\n        <h1 className=\"text-center px-2\">\n          Preview: You have uploaded a picture of a dog and it is classified as{' '}\n          <span className=\"font-bold\">{nameOfThetitle}</span>\n        </h1>\n      )}\n    </div>\n  );\n};\n\nexport default PreviewTitle;\n","import * as mobilenet from '@tensorflow-models/mobilenet';\nimport React, { Fragment, useRef as useReference, useState } from 'react';\n\nimport { getFile, ImageProps as ImageProperties } from '../utils/file-reader';\nimport { formatNames } from '../utils/names';\nimport PreviewImage from './Previewimage';\nimport PreviewTitle from './Title';\n\ninterface Predictions {\n  className: string;\n  probability: number;\n}\n\ninterface FileUploadProps {\n  classifiedDogNames: string[];\n  onUploadCompleted: (arr: string[]) => void;\n  onUploadStarted?: () => void;\n}\n\nconst FileUpload = ({\n  classifiedDogNames,\n  onUploadStarted,\n  onUploadCompleted,\n}: FileUploadProps): React.ReactElement => {\n  const imageReference = useReference<HTMLImageElement>(null);\n  const fileInput = useReference<HTMLInputElement>(null);\n  const [image, setImage] = useState<ImageProperties | null>(null);\n\n  const onFileHandler = async function onFileHandler(\n    event: React.ChangeEvent<HTMLInputElement>,\n  ): Promise<boolean> {\n    const {\n      target: { files },\n    } = event;\n\n    const file = files as FileList;\n\n    if (onUploadStarted !== undefined && file[0] !== undefined)\n      onUploadStarted();\n\n    try {\n      const imageInfo = (await getFile(file[0])) as ImageProperties;\n      setImage(imageInfo);\n\n      if (imageReference.current !== null) {\n        const model = await mobilenet.load();\n        const predictions = (await model.classify(\n          imageReference.current,\n        )) as Predictions[];\n\n        // Tensorflow automatically returns a sorted array by its probability value\n        const [{ className }] = predictions;\n\n        const filteredNames = formatNames(\n          className\n            .split(/\\s|,/u)\n            .map((item: string): string =>\n              item.toLowerCase().replace(/\\s/u, ''),\n            )\n            .filter((item: string): string => item),\n        );\n\n        onUploadCompleted(filteredNames);\n      }\n    } catch (error) {\n      /*\n       * In commerical product we can add an error notification to the users.\n       * I am skipping intentionally for now\n       */\n      console.warn(error);\n    }\n\n    return true;\n  };\n\n  const onUploadHandler = function onUploadHandler(\n    event: React.MouseEvent<HTMLButtonElement>,\n  ): void {\n    event.preventDefault();\n    fileInput.current?.click();\n  };\n\n  return (\n    <Fragment>\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onFileHandler}\n        className=\"hidden\"\n        ref={fileInput}\n      />\n      <div>\n        {image === null ? null : (\n          <Fragment>\n            <PreviewTitle title={classifiedDogNames} />\n            <PreviewImage\n              src={image.imageSource}\n              alt={image.name}\n              ref={imageReference}\n            />\n          </Fragment>\n        )}\n      </div>\n      <div className=\"flex justify-center\">\n        <button\n          className=\"w-auto mt-1 bg-blue-600 hover:bg-blue-500 px-6 py-3 text-white font-bold rounded\"\n          onClick={onUploadHandler}\n        >\n          {image === null ? `Upload` : `Change`}\n        </button>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default FileUpload;\n","import React from 'react';\ninterface InfoProps {\n  msg: string;\n}\n\nconst Info = ({ msg }: InfoProps): React.ReactElement => (\n  <div className=\"text-white font-bold flex justify-center items-center h-screen\">\n    <span className=\"block text-center\">{msg}</span>\n  </div>\n);\nexport default Info;\n","import './Scrollable.css';\n\nimport React, {\n  createRef as createReference,\n  PureComponent,\n  RefObject as ReferenceObject,\n} from 'react';\nimport uniqid from 'uniqid';\n\ninterface ScrollableProps {\n  breeds: string[];\n}\n\ninterface ScrollableState {\n  breeds: string[];\n  finished: boolean;\n  loading: boolean;\n}\n\nclass Scrollable extends PureComponent<ScrollableProps, ScrollableState> {\n  private readonly MAX_LIMIT: number = 13;\n\n  private readonly containerReference: ReferenceObject<\n    HTMLDivElement\n  > = createReference<HTMLDivElement>();\n\n  private currentCount: number = 0;\n\n  public constructor(properties: ScrollableProps) {\n    super(properties);\n    this.state = {\n      breeds: [],\n      finished: false,\n      loading: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    if (this.containerReference.current !== null) {\n      this.containerReference.current.addEventListener(\n        'scroll',\n        this.onScrollHandler,\n      );\n      this.setState({ loading: true });\n      this.loadMoreImages(0, this.MAX_LIMIT);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this.containerReference.current !== null) {\n      this.containerReference.current.removeEventListener(\n        'scroll',\n        this.onScrollHandler,\n      );\n    }\n\n    this.currentCount = 0;\n  }\n\n  public render(): React.ReactNode {\n    const { breeds, finished, loading } = this.state;\n\n    return (\n      <React.Fragment>\n        <div className=\"container-full w-full py-2 border-gray-600 px-2\">\n          <div className=\"mx-1 scrollable\" ref={this.containerReference}>\n            <div className=\"grid grid-rows-auto grid-cols-3 gap-4\">\n              {breeds.map(\n                (breedUrl: string): React.ReactNode => (\n                  <React.Fragment key={uniqid()}>\n                    <div className=\"border border-gray-800 shadow\">\n                      <img\n                        src={breedUrl}\n                        alt=\"breeds\"\n                        className=\"object-cover w-full h-full\"\n                      />\n                    </div>\n                  </React.Fragment>\n                ),\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-col justify-center items-center my-3\">\n            {loading === true ? (\n              <span className=\"text-xl font-bold text-white\">Loading...</span>\n            ) : null}\n\n            {finished === true ? (\n              <h1 className=\"text-sm text-white text-center w-6/12\">\n                Hope you enjoyed the gallery show! why don't you upload an\n                another breed\n              </h1>\n            ) : null}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  private readonly loadMoreImages = (offset: number, size: number): void => {\n    const temporary: string[] = [];\n\n    for (let idx = offset; idx < offset + size; idx++) {\n      if (this.props.breeds[idx] !== undefined)\n        temporary.push(this.props.breeds[idx]);\n    }\n\n    this.setState({\n      breeds: [...this.state.breeds, ...temporary],\n      loading: false,\n    });\n  };\n\n  private readonly onScrollHandler = (): void => {\n    if (\n      this.containerReference.current !== null &&\n      this.containerReference.current.scrollTop +\n        this.containerReference.current.clientHeight >=\n        this.containerReference.current.scrollHeight\n    ) {\n      if (this.state.loading === false && this.state.finished === false) {\n        if (this.state.breeds.length >= this.props.breeds.length) {\n          this.setState({\n            finished: true,\n            loading: false,\n          });\n        } else {\n          this.currentCount += 13;\n          // SetTimeout is just to give a feel that the data is being fetched from rest api endpoint for this demo\n          this.setState({ loading: true }, (): unknown =>\n            setTimeout(\n              (): void =>\n                this.loadMoreImages(this.currentCount, this.MAX_LIMIT),\n              Math.random() * 1000,\n            ),\n          );\n        }\n      }\n    }\n  };\n}\n\nexport default Scrollable;\n","import './Spinner.css';\n\nimport React from 'react';\n\nconst Spinner = (): React.ReactElement => (\n  <div className=\"loading\">\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 4335 4335\"\n      width=\"100\"\n      height=\"100\"\n    >\n      <path\n        fill=\"#008DD2\"\n        d=\"M3346 1077c41,0 75,34 75,75 0,41 -34,75 -75,75 -41,0 -75,-34 -75,-75 0,-41 34,-75 75,-75zm-1198 -824c193,0 349,156 349,349 0,193 -156,349 -349,349 -193,0 -349,-156 -349,-349 0,-193 156,-349 349,-349zm-1116 546c151,0 274,123 274,274 0,151 -123,274 -274,274 -151,0 -274,-123 -274,-274 0,-151 123,-274 274,-274zm-500 1189c134,0 243,109 243,243 0,134 -109,243 -243,243 -134,0 -243,-109 -243,-243 0,-134 109,-243 243,-243zm500 1223c121,0 218,98 218,218 0,121 -98,218 -218,218 -121,0 -218,-98 -218,-218 0,-121 98,-218 218,-218zm1116 434c110,0 200,89 200,200 0,110 -89,200 -200,200 -110,0 -200,-89 -200,-200 0,-110 89,-200 200,-200zm1145 -434c81,0 147,66 147,147 0,81 -66,147 -147,147 -81,0 -147,-66 -147,-147 0,-81 66,-147 147,-147zm459 -1098c65,0 119,53 119,119 0,65 -53,119 -119,119 -65,0 -119,-53 -119,-119 0,-65 53,-119 119,-119z\"\n      />\n    </svg>\n  </div>\n);\nexport default Spinner;\n","import './Layout.css';\n\nimport { AxiosError, AxiosResponse } from 'axios';\nimport React, { useEffect, useState } from 'react';\n\nimport { api } from '../service/api';\nimport { fetchDogByBreedName } from '../utils/breeds';\nimport FileUpload from './Fileupload';\nimport Info from './Info';\nimport Scrollable from './Scrollable';\nimport Spinner from './Spinner';\n\nconst allBreeds = new Map<string, string[]>();\n\nconst LayoutContainer = (): React.ReactElement => {\n  const [nameOfTheBreeds, setNameOfTheBreeds] = useState<string[]>([]);\n  const [classifiedDogsList, setClassifiedDogsList] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean | null>(null);\n  const [isEmpty, setIsEmpty] = useState<boolean>(false);\n\n  useEffect((): void => {\n    api\n      .get('/breeds/list/all')\n      .then((response: AxiosResponse): void => {\n        Object.keys(response.data.message).forEach(function loopThrough(\n          key: string,\n        ): void {\n          allBreeds.set(key, response.data.message[key]);\n        });\n      })\n      .catch((error: AxiosError): void => {\n        console.warn(error);\n      });\n  }, []);\n\n  const onUploadStartedHandler = function onUploadStartedHandler(): void {\n    setClassifiedDogsList([]);\n  };\n\n  const onUploadedHandler = async function onUploadedHandler(\n    names: string[],\n  ): Promise<boolean> {\n    if (isEmpty) {\n      setIsEmpty(false);\n    }\n\n    setNameOfTheBreeds(names);\n    setLoading(true);\n    const dogNames: string[] = [];\n\n    for (const name of names) {\n      if (allBreeds.has(name)) {\n        dogNames.push(name);\n      }\n    }\n\n    setNameOfTheBreeds(dogNames);\n\n    const data = fetchDogByBreedName(allBreeds, names);\n    const allResults = [];\n\n    while (true) {\n      const next = data.next();\n\n      if (next.done === true) {\n        break;\n      }\n\n      allResults.push(next.value);\n    }\n\n    // Resolve all the promises from iterateable value and it returns 2 dimensional array\n    const breedList = await Promise.all(allResults);\n    const breeds = [];\n\n    for (const dog of breedList) {\n      breeds.push(dog.breeds);\n    }\n\n    // Flattern 2 dimensional array\n    const breedsResult = breeds.flat();\n    setClassifiedDogsList(breedsResult);\n    setLoading(false);\n\n    if (breedsResult.length === 0) {\n      setIsEmpty(true);\n    }\n\n    return false;\n  };\n\n  return (\n    <React.Fragment>\n      <h1 className=\"text-3xl text-black font-bold text-center\">\n        Dogs gallery\n      </h1>\n\n      <div className=\"flex justify-center items-center\">\n        <div className=\"mt-2 w-5/6 flex flex-col justify-center items-center border-2 left-container\">\n          <FileUpload\n            onUploadStarted={onUploadStartedHandler}\n            onUploadCompleted={onUploadedHandler}\n            classifiedDogNames={nameOfTheBreeds}\n          />\n        </div>\n        <div className=\"w-full mt-2 bg-gray-700 border-2 right-container\">\n          {typeof loading === 'object' ? (\n            <Info\n              msg=\"Gallery will be display as soon as you upload your dog's\n                picture.\"\n            />\n          ) : loading === true ? (\n            <div className=\"flex justify-center items-center h-screen\">\n              <Spinner />\n            </div>\n          ) : classifiedDogsList.length > 0 ? (\n            <div className=\"h-screen\">\n              <Scrollable breeds={classifiedDogsList} />\n            </div>\n          ) : isEmpty === true ? (\n            <Info msg=\"No results found!\" />\n          ) : null}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default LayoutContainer;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport LayoutContainer from \"./components/Layout\";\n\nReactDOM.render(<LayoutContainer />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}